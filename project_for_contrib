import sys

class ExceptionStrings:
	empty_log = 'You tried to provide an empty log file! Please, select another file.'
	incorrect_arg = 'An argument {} doesn\'t exist! Use help to get more info.'
	no_arg_value = 'You didn\'t provide any value after {} argument! Use help to get more info.'
	bad_usage = 'Bad usage! Use help to get more info.'
	wrong_path = 'Can\'t find such file or directory. Use help to get more info.'

#Обработка(анализ) входных данных из.log файла на выявление аномалий
def analyze(path_to_file, path_to_output):
	default_ua = ['Firefox', 'Chrome', 'Safari', 'Edge']
	anomaly_list = list()
	with open(path_to_file, 'rb') as LogFile:
		if LogFile.read().decode() == '':
			print(ExceptionStrings.empty_log)
		else:
			LogFile.seek(0)
			for line in LogFile:
				is_anomaly = True
				log_string = line.decode()
				ip_string = log_string[:log_string.find(' ')]
				time_string = ''.join(log_string.split(' ')[i] for i in range(3, 5))
				ua_string = log_string[log_string.rfind('Mozilla'):]
				for ua in default_ua:
					if ua in ua_string:
						is_anomaly = False
						break
				if is_anomaly:
					anomaly_list.append(f'{ip_string + " "*(16-len(ip_string))}| {time_string[1:-6]} UTC{time_string[-6:-3]} | {ua_string}')

	with open(path_to_output + 'analysisresult.txt', 'wb') as ResultFile:
		if anomaly_list == list():
			ResultFile.write('No detected anomalies'.encode())
		else:
			ResultFile.write(f'Count of detected anomalies: {len(anomaly_list)}\n\n'.encode())
			ResultFile.write(f'{" "*7}IP{" "*21}Time\t\t\t\tUser-Agent\n'.encode())
			for anomaly_string in anomaly_list:
				ResultFile.write(f'{anomaly_string}\n'.encode())
		print('Analysis\'s been finished. Check result file')

# Чтение аргументов пользователя и запуск анализа 
def get_analysis(args):
	path_to_file = '/var/log/apache2/access.log'
	path_to_output = './'
	if len(args) == 2:
		analyze(path_to_file, path_to_output)
	else:
		for arg in args[2::2]:
			if arg not in ['-p', '-o']:
				print(ExceptionStrings.incorrect_arg.format(arg))
				return
			if arg == '-p':
				try:
					path_to_file = args[args.index(arg) + 1]
					open(path_to_file)
				except IndexError:
					print(ExceptionStrings.no_arg_value.format(arg))
					return
				except FileNotFoundError:
					print(ExceptionStrings.wrong_path)
					return
			if arg == '-o':
				try:
					path_to_output = args[args.index(arg) + 1]
					file = open(path_to_output + 'analysisresult.txt', 'w')
					file.close()
				except IndexError:
					print(ExceptionStrings.no_arg_value.format(arg))
					return
				except FileNotFoundError:
					print(ExceptionStrings.wrong_path)
					return
		analyze(path_to_file, path_to_output)
		
# Выводит информацию об утилите 
def get_help():
	print('\n\tAnomalyAnalysis help you to analyze your access.log file\n')
	print('Common usage: python3 anomalyanalysis.py [command] [args]\n\n')
	print('Commands:\n')
	print('"help" - shows this list\n\n')
	print('"analyze [-p pathToFile] [-o pathToOutput]" - analyze your access.log file\n')
	print('[-p pathToFile] - enter path to your log file (default value: /var/log/apache2/access.log)\n')
	print('[-o pathToOutput] - enter path to result file (default value: ./)\n\n')
 
 
def main():
	arguments = sys.argv
	if len(arguments) == 1 or arguments[1] == 'help':
		get_help()
	elif len(arguments) > 1 and arguments[1] == "analyze":
		get_analysis(arguments)
	else:
		print(ExceptionStrings.bad_usage)
	return
 
 
if __name__ == '__main__':
	main()
